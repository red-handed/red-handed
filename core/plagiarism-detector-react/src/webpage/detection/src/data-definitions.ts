import { DefinitionOrExpression, Loc, Program } from "./abstract-syntax-tree";

/**
 * The plagiarism type specifies the kinds of plagiarisms
 * detected by the algorithm. 
 * 
 * -- "ok" means the programs are not suspected of plagiarmsm.
 * -- "desugaring" signifies translation to an equivalent 
 *     syntactic form.
 * 
 * The other types are self-explanatory.
 */
export type PlagiarismType
  = "ok"
  | "moving code"
  | "renaming variables"
  | "changing comments and spaces"
  | "extracting code into functions"
  | "desugaring"

/**
 * Represents the result generated by the plagiarism algorithm. 
 * -- "type" is the kind of plagiarism detected
 * -- "Loc" represents a series of location information
 * -- "similarity" is a number denoting the similarity %
 */
export type CopyInfo = {
  type: PlagiarismType,
  loc: [Loc, Loc][],
  similarity: number
}

/**
 * Represents the input to the plagiarism detector algorithm
 * once the parser generates AST for lhs, and rhs program strings.
 */
export type ProgramPair = {
  lhs_prog: Program,
  rhs_prog: Program
}

/**
 * Represents the input to the plagiarism detector algorithm
 * in terms of paths to files in the file system
 */
export type ProgramPathPair = {
  lhs_path: string,
  rhs_path: string
}

/**
 * Represents the input  to the plagiarism detector algorithm
 * in terms of strings that represent the program.
 */
export type ProgramStrPair = {
  lhs_str: string,
  rhs_str: string,
}


export type ProgLocHash = {
  lhs_loc_hash: [DefinitionOrExpression, Loc][],
  rhs_loc_hash: [DefinitionOrExpression, Loc][]
}

export type ProgUnnamedHash = {
  lhs_unnamed_hash: [DefinitionOrExpression, Loc][],
  rhs_unnamed_hash: [DefinitionOrExpression, Loc][]
}

export type SimilarLocs = {
  lhs_loc: Loc[],
  rhs_loc: Loc[]
}

export type ProgramPairLocs = {
  lhs_locs: Loc[],
  rhs_locs: Loc[]
}
