/**
 * Example program fragments representing various copying-tactics. 
 * The reading from the file-system has been commented out to run this
 * in the browser.
 */

import parser from '../parser/parser.js';
import { Program } from './abstract-syntax-tree';

export const prog_1 =
  "(define the-pi 3.14)\n\n(define (fact n)\n  (cond [(= 0 n) 1]\n        [else (* n (fact (- n 1)))]))\n\n(define tau 6.28)\n\n(define (sum-both-nat n m)\n  (if (or (< n 0) (< m 0))\n      \"bad\"\n      (+ n m)))\n"
// fs.readFileSync('./corpus/test-files/1-prog.txt', { encoding: 'utf8', flag: 'r' })
export const prog_1_parsed: Program = parser.parse(prog_1)

export const prog_2_ast
  = "{\n   \"kind\": \"Program\",\n   \"body\": [\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"the-pi\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"3.14\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 0,\n               \"line\": 1,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 20,\n               \"line\": 1,\n               \"column\": 21\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"fact\",\n         \"params\": [\n            \"n\"\n         ],\n         \"body\": {\n            \"kind\": \"elsecond\",\n            \"clauses\": [\n               {\n                  \"kind\": \"cond-clause\",\n                  \"lhs\": {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"=\",\n                     \"args\": [\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        },\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"n\"\n                        }\n                     ]\n                  },\n                  \"rhs\": {\n                     \"kind\": \"NumericLiteral\",\n                     \"value\": \"1\"\n                  }\n               }\n            ],\n            \"elserhs\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"*\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"fact\",\n                     \"args\": [\n                        {\n                           \"kind\": \"CallExpression\",\n                           \"callee\": \"-\",\n                           \"args\": [\n                              {\n                                 \"kind\": \"Identifier\",\n                                 \"name\": \"n\"\n                              },\n                              {\n                                 \"kind\": \"NumericLiteral\",\n                                 \"value\": \"1\"\n                              }\n                           ]\n                        }\n                     ]\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 22,\n               \"line\": 3,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 96,\n               \"line\": 5,\n               \"column\": 38\n            }\n         }\n      },\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"tau\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"6.28\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 98,\n               \"line\": 7,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 115,\n               \"line\": 7,\n               \"column\": 18\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"sum-both-nat\",\n         \"params\": [\n            \"n\",\n            \"m\"\n         ],\n         \"body\": {\n            \"kind\": \"if\",\n            \"test\": {\n               \"kind\": \"or\",\n               \"args\": [\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"n\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"m\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  }\n               ]\n            },\n            \"then\": {\n               \"kind\": \"StringLiteral\",\n               \"value\": \"bad\"\n            },\n            \"else\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"+\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  },\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"m\"\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 117,\n               \"line\": 9,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 198,\n               \"line\": 12,\n               \"column\": 16\n            }\n         }\n      }\n   ]\n}"
// = fs.readFileSync('./corpus/test-files/2-prog-ast.txt', { encoding: 'utf8', flag: 'r' })
export const prog_2_ast_json: Program = JSON.parse(prog_2_ast)

export const prog_3_comments_spaces
  = "(\n\ndefine \n\n;;;; ;; HELLO BYE\n\nthe-pi\n 3.14)\n\n\n\n#|\n;;;; ;; HELLO BYE\n;;;; ;; HELLO BYE\n;;;; ;; HELLO BYE\n|#\n\n\n( define     ( \nfact     n    )\n       ( cond [\n( = \n0\n n ) 1]\n        [ else ( \n  * n ( \n  fact ( - n 1 )\n        )\n        )\n        ]\n        ) )\n\n\n\n( define \n\n tau 6.28 \n)\n\n#|\n\nelevator\n\n\n|#\n\n(\n\n\n\ndefine \n\n\n(sum-both-nat \n  n m )\n  ( if \n(\n or ( < n 0 )       \n\n       ( < m 0 )\n\n      )\n      \"bad\"\n      ( \n + n\n\n       m\n )\n; nuclear\n)\n\n\n)\n\n"
// fs.readFileSync('./corpus/test-files/3-prog-comments-spaces.txt', { encoding: 'utf8', flag: 'r' })
export const prog_3_comments_spaces_parsed: Program = parser.parse(prog_3_comments_spaces)

export const prog_4_comments_spaces_ast
  = "{\n   \"kind\": \"Program\",\n   \"body\": [\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"the-pi\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"3.14\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 0,\n               \"line\": 1,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 44,\n               \"line\": 8,\n               \"column\": 7\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"fact\",\n         \"params\": [\n            \"n\"\n         ],\n         \"body\": {\n            \"kind\": \"elsecond\",\n            \"clauses\": [\n               {\n                  \"kind\": \"cond-clause\",\n                  \"lhs\": {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"=\",\n                     \"args\": [\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        },\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"n\"\n                        }\n                     ]\n                  },\n                  \"rhs\": {\n                     \"kind\": \"NumericLiteral\",\n                     \"value\": \"1\"\n                  }\n               }\n            ],\n            \"elserhs\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"*\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"fact\",\n                     \"args\": [\n                        {\n                           \"kind\": \"CallExpression\",\n                           \"callee\": \"-\",\n                           \"args\": [\n                              {\n                                 \"kind\": \"Identifier\",\n                                 \"name\": \"n\"\n                              },\n                              {\n                                 \"kind\": \"NumericLiteral\",\n                                 \"value\": \"1\"\n                              }\n                           ]\n                        }\n                     ]\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 110,\n               \"line\": 19,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 258,\n               \"line\": 31,\n               \"column\": 12\n            }\n         }\n      },\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"tau\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"6.28\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 262,\n               \"line\": 35,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 285,\n               \"line\": 38,\n               \"column\": 2\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"sum-both-nat\",\n         \"params\": [\n            \"n\",\n            \"m\"\n         ],\n         \"body\": {\n            \"kind\": \"if\",\n            \"test\": {\n               \"kind\": \"or\",\n               \"args\": [\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"n\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"m\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  }\n               ]\n            },\n            \"then\": {\n               \"kind\": \"StringLiteral\",\n               \"value\": \"bad\"\n            },\n            \"else\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"+\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  },\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"m\"\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 306,\n               \"line\": 47,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 456,\n               \"line\": 73,\n               \"column\": 2\n            }\n         }\n      }\n   ]\n}"
// fs.readFileSync('./corpus/test-files/4-prog-comments-spaces-ast.txt', { encoding: 'utf8', flag: 'r' })
export const prog_4_comments_spaces_ast_json: Program = JSON.parse(prog_4_comments_spaces_ast)

export const prog_5_renamed_1
  = "(define ip-eht 3.14)\n\n(define (tcaf num)\n  (cond [(= 0 num) 1]\n        [else (* num (tcaf (- num 1)))]))\n\n(define tau 6.28)\n\n(define (sum-both-nat n m)\n  (if (or (< n 0) (< m 0))\n      \"bad\"\n      (+ n m)))\n"
// fs.readFileSync('./corpus/test-files/5-prog-renamed-1.txt', { encoding: 'utf8', flag: 'r' })
export const prog_5_renamed_1_parsed: Program = parser.parse(prog_5_renamed_1)

export const prog_6_renamed_1_ast
  = "{\n   \"kind\": \"Program\",\n   \"body\": [\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"ip-eht\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"3.14\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 0,\n               \"line\": 1,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 20,\n               \"line\": 1,\n               \"column\": 21\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"tcaf\",\n         \"params\": [\n            \"num\"\n         ],\n         \"body\": {\n            \"kind\": \"elsecond\",\n            \"clauses\": [\n               {\n                  \"kind\": \"cond-clause\",\n                  \"lhs\": {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"=\",\n                     \"args\": [\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        },\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"num\"\n                        }\n                     ]\n                  },\n                  \"rhs\": {\n                     \"kind\": \"NumericLiteral\",\n                     \"value\": \"1\"\n                  }\n               }\n            ],\n            \"elserhs\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"*\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"num\"\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"tcaf\",\n                     \"args\": [\n                        {\n                           \"kind\": \"CallExpression\",\n                           \"callee\": \"-\",\n                           \"args\": [\n                              {\n                                 \"kind\": \"Identifier\",\n                                 \"name\": \"num\"\n                              },\n                              {\n                                 \"kind\": \"NumericLiteral\",\n                                 \"value\": \"1\"\n                              }\n                           ]\n                        }\n                     ]\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 22,\n               \"line\": 3,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 104,\n               \"line\": 5,\n               \"column\": 42\n            }\n         }\n      },\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"tau\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"6.28\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 106,\n               \"line\": 7,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 123,\n               \"line\": 7,\n               \"column\": 18\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"sum-both-nat\",\n         \"params\": [\n            \"n\",\n            \"m\"\n         ],\n         \"body\": {\n            \"kind\": \"if\",\n            \"test\": {\n               \"kind\": \"or\",\n               \"args\": [\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"n\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"m\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  }\n               ]\n            },\n            \"then\": {\n               \"kind\": \"StringLiteral\",\n               \"value\": \"bad\"\n            },\n            \"else\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"+\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  },\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"m\"\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 125,\n               \"line\": 9,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 206,\n               \"line\": 12,\n               \"column\": 16\n            }\n         }\n      }\n   ]\n}"
// fs.readFileSync('./corpus/test-files/6-prog-renamed-1-ast.txt', { encoding: 'utf8', flag: 'r' })
export const prog_6_renamed_1_ast_json: Program = JSON.parse(prog_6_renamed_1_ast)

export const prog_7_renamed_2
  = "(define the-pi 3.14)\n\n(define (fact n)\n  (cond [(= 0 n) 1]\n        [else (* n (fact (- n 1)))]))\n\n(define tau 6.28)\n\n(define (S m n)\n  (if (or (< m 0) (< n 0))\n      \"bad\"\n      (+ m n)))\n"
// fs.readFileSync('./corpus/test-files/7-prog-renamed-2.txt', { encoding: 'utf8', flag: 'r' })
export const prog_7_renamed_2_parsed: Program = parser.parse(prog_7_renamed_2)

export const prog_8_renamed_2_ast
  = "{\n   \"kind\": \"Program\",\n   \"body\": [\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"the-pi\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"3.14\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 0,\n               \"line\": 1,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 20,\n               \"line\": 1,\n               \"column\": 21\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"fact\",\n         \"params\": [\n            \"n\"\n         ],\n         \"body\": {\n            \"kind\": \"elsecond\",\n            \"clauses\": [\n               {\n                  \"kind\": \"cond-clause\",\n                  \"lhs\": {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"=\",\n                     \"args\": [\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        },\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"n\"\n                        }\n                     ]\n                  },\n                  \"rhs\": {\n                     \"kind\": \"NumericLiteral\",\n                     \"value\": \"1\"\n                  }\n               }\n            ],\n            \"elserhs\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"*\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"fact\",\n                     \"args\": [\n                        {\n                           \"kind\": \"CallExpression\",\n                           \"callee\": \"-\",\n                           \"args\": [\n                              {\n                                 \"kind\": \"Identifier\",\n                                 \"name\": \"n\"\n                              },\n                              {\n                                 \"kind\": \"NumericLiteral\",\n                                 \"value\": \"1\"\n                              }\n                           ]\n                        }\n                     ]\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 22,\n               \"line\": 3,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 96,\n               \"line\": 5,\n               \"column\": 38\n            }\n         }\n      },\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"tau\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"6.28\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 98,\n               \"line\": 7,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 115,\n               \"line\": 7,\n               \"column\": 18\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"S\",\n         \"params\": [\n            \"m\",\n            \"n\"\n         ],\n         \"body\": {\n            \"kind\": \"if\",\n            \"test\": {\n               \"kind\": \"or\",\n               \"args\": [\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"m\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"n\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  }\n               ]\n            },\n            \"then\": {\n               \"kind\": \"StringLiteral\",\n               \"value\": \"bad\"\n            },\n            \"else\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"+\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"m\"\n                  },\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 117,\n               \"line\": 9,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 187,\n               \"line\": 12,\n               \"column\": 16\n            }\n         }\n      }\n   ]\n}"
// fs.readFileSync('./corpus/test-files/8-prog-renamed-2-ast.txt', { encoding: 'utf8', flag: 'r' })
export const prog_8_renamed_2_ast_json: Program = JSON.parse(prog_8_renamed_2_ast)

export const prog_9_reordered_1
  = "(define the-pi 3.14)\n\n(define (fact n)\n  (cond [(= 0 n) 1]\n        [else (* n (fact (- n 1)))]))\n\n(define (sum-both-nat n m)\n  (if (or (< n 0) (< m 0))\n      \"bad\"\n      (+ n m)))\n\n(define tau 6.28)\n"
// fs.readFileSync('./corpus/test-files/9-prog-reordered-1.txt', { encoding: 'utf8', flag: 'r' })
export const prog_9_reordered_1_parsed: Program = parser.parse(prog_9_reordered_1)

export const prog_10_reordered_1_ast
  = "{\n   \"kind\": \"Program\",\n   \"body\": [\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"the-pi\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"3.14\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 0,\n               \"line\": 1,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 20,\n               \"line\": 1,\n               \"column\": 21\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"fact\",\n         \"params\": [\n            \"n\"\n         ],\n         \"body\": {\n            \"kind\": \"elsecond\",\n            \"clauses\": [\n               {\n                  \"kind\": \"cond-clause\",\n                  \"lhs\": {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"=\",\n                     \"args\": [\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        },\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"n\"\n                        }\n                     ]\n                  },\n                  \"rhs\": {\n                     \"kind\": \"NumericLiteral\",\n                     \"value\": \"1\"\n                  }\n               }\n            ],\n            \"elserhs\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"*\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"fact\",\n                     \"args\": [\n                        {\n                           \"kind\": \"CallExpression\",\n                           \"callee\": \"-\",\n                           \"args\": [\n                              {\n                                 \"kind\": \"Identifier\",\n                                 \"name\": \"n\"\n                              },\n                              {\n                                 \"kind\": \"NumericLiteral\",\n                                 \"value\": \"1\"\n                              }\n                           ]\n                        }\n                     ]\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 22,\n               \"line\": 3,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 96,\n               \"line\": 5,\n               \"column\": 38\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"sum-both-nat\",\n         \"params\": [\n            \"n\",\n            \"m\"\n         ],\n         \"body\": {\n            \"kind\": \"if\",\n            \"test\": {\n               \"kind\": \"or\",\n               \"args\": [\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"n\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"m\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  }\n               ]\n            },\n            \"then\": {\n               \"kind\": \"StringLiteral\",\n               \"value\": \"bad\"\n            },\n            \"else\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"+\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  },\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"m\"\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 98,\n               \"line\": 7,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 179,\n               \"line\": 10,\n               \"column\": 16\n            }\n         }\n      },\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"tau\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"6.28\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 181,\n               \"line\": 12,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 198,\n               \"line\": 12,\n               \"column\": 18\n            }\n         }\n      }\n   ]\n}"
// fs.readFileSync('./corpus/test-files/10-prog-reordered-1-ast.txt', { encoding: 'utf8', flag: 'r' })
export const prog_10_reordered_1_ast_json: Program = JSON.parse(prog_10_reordered_1_ast)

export const prog_11_reordered_2
  = "(define tau 6.28)\n\n(define the-pi 3.14)\n\n(define (fact n)\n  (cond [(= 0 n) 1]\n        [else (* n (fact (- n 1)))]))\n\n(define (sum-both-nat n m)\n  (if (or (< n 0) (< m 0))\n      \"bad\"\n      (+ n m)))\n"
// fs.readFileSync('./corpus/test-files/11-prog-reordered-2.txt', { encoding: 'utf8', flag: 'r' })
export const prog_11_reordered_2_parsed: Program = parser.parse(prog_11_reordered_2)

export const prog_12_reordered_2_ast
  = "{\n   \"kind\": \"Program\",\n   \"body\": [\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"tau\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"6.28\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 0,\n               \"line\": 1,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 17,\n               \"line\": 1,\n               \"column\": 18\n            }\n         }\n      },\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"the-pi\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"3.14\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 19,\n               \"line\": 3,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 39,\n               \"line\": 3,\n               \"column\": 21\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"fact\",\n         \"params\": [\n            \"n\"\n         ],\n         \"body\": {\n            \"kind\": \"elsecond\",\n            \"clauses\": [\n               {\n                  \"kind\": \"cond-clause\",\n                  \"lhs\": {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"=\",\n                     \"args\": [\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        },\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"n\"\n                        }\n                     ]\n                  },\n                  \"rhs\": {\n                     \"kind\": \"NumericLiteral\",\n                     \"value\": \"1\"\n                  }\n               }\n            ],\n            \"elserhs\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"*\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"fact\",\n                     \"args\": [\n                        {\n                           \"kind\": \"CallExpression\",\n                           \"callee\": \"-\",\n                           \"args\": [\n                              {\n                                 \"kind\": \"Identifier\",\n                                 \"name\": \"n\"\n                              },\n                              {\n                                 \"kind\": \"NumericLiteral\",\n                                 \"value\": \"1\"\n                              }\n                           ]\n                        }\n                     ]\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 41,\n               \"line\": 5,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 115,\n               \"line\": 7,\n               \"column\": 38\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"sum-both-nat\",\n         \"params\": [\n            \"n\",\n            \"m\"\n         ],\n         \"body\": {\n            \"kind\": \"if\",\n            \"test\": {\n               \"kind\": \"or\",\n               \"args\": [\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"n\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"m\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  }\n               ]\n            },\n            \"then\": {\n               \"kind\": \"StringLiteral\",\n               \"value\": \"bad\"\n            },\n            \"else\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"+\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  },\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"m\"\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 117,\n               \"line\": 9,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 198,\n               \"line\": 12,\n               \"column\": 16\n            }\n         }\n      }\n   ]\n}"
// fs.readFileSync('./corpus/test-files/12-prog-reordered-2-ast.txt', { encoding: 'utf8', flag: 'r' })
export const prog_12_reordered_2_ast_json: Program = JSON.parse(prog_12_reordered_2_ast)

export const prog_13_lifted_1
  = "(define the-pi 3.14)\n\n(define (fact n)\n  (cond [(= 0 n) 1]\n        [else (* n (fact (- n 1)))]))\n\n(define tau 6.28)\n\n(define (lifted n m)\n  (if (or (< n 0) (< m 0))\n      \"bad\"\n      (+ n m)))\n\n(define (sum-both-nat n m)\n  (liffted n m))\n"
// fs.readFileSync('./corpus/test-files/13-prog-lifted-1.txt', { encoding: 'utf8', flag: 'r' })
export const prog_13_lifted_1_parsed: Program = parser.parse(prog_13_lifted_1)

export const prog_14_lifted_1_ast
  = "{\n   \"kind\": \"Program\",\n   \"body\": [\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"the-pi\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"3.14\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 0,\n               \"line\": 1,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 20,\n               \"line\": 1,\n               \"column\": 21\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"fact\",\n         \"params\": [\n            \"n\"\n         ],\n         \"body\": {\n            \"kind\": \"elsecond\",\n            \"clauses\": [\n               {\n                  \"kind\": \"cond-clause\",\n                  \"lhs\": {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"=\",\n                     \"args\": [\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        },\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"n\"\n                        }\n                     ]\n                  },\n                  \"rhs\": {\n                     \"kind\": \"NumericLiteral\",\n                     \"value\": \"1\"\n                  }\n               }\n            ],\n            \"elserhs\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"*\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"fact\",\n                     \"args\": [\n                        {\n                           \"kind\": \"CallExpression\",\n                           \"callee\": \"-\",\n                           \"args\": [\n                              {\n                                 \"kind\": \"Identifier\",\n                                 \"name\": \"n\"\n                              },\n                              {\n                                 \"kind\": \"NumericLiteral\",\n                                 \"value\": \"1\"\n                              }\n                           ]\n                        }\n                     ]\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 22,\n               \"line\": 3,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 96,\n               \"line\": 5,\n               \"column\": 38\n            }\n         }\n      },\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"tau\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"6.28\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 98,\n               \"line\": 7,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 115,\n               \"line\": 7,\n               \"column\": 18\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"lifted\",\n         \"params\": [\n            \"n\",\n            \"m\"\n         ],\n         \"body\": {\n            \"kind\": \"if\",\n            \"test\": {\n               \"kind\": \"or\",\n               \"args\": [\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"n\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"m\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  }\n               ]\n            },\n            \"then\": {\n               \"kind\": \"StringLiteral\",\n               \"value\": \"bad\"\n            },\n            \"else\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"+\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  },\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"m\"\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 117,\n               \"line\": 9,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 192,\n               \"line\": 12,\n               \"column\": 16\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"sum-both-nat\",\n         \"params\": [\n            \"n\",\n            \"m\"\n         ],\n         \"body\": {\n            \"kind\": \"CallExpression\",\n            \"callee\": \"liffted\",\n            \"args\": [\n               {\n                  \"kind\": \"Identifier\",\n                  \"name\": \"n\"\n               },\n               {\n                  \"kind\": \"Identifier\",\n                  \"name\": \"m\"\n               }\n            ]\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 194,\n               \"line\": 14,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 237,\n               \"line\": 15,\n               \"column\": 17\n            }\n         }\n      }\n   ]\n}"
// fs.readFileSync('./corpus/test-files/14-prog-lifted-1-ast.txt', { encoding: 'utf8', flag: 'r' })
export const prog_14_lifted_1_ast_json: Program = JSON.parse(prog_14_lifted_1_ast)

export const prog_15_desugared_1
  = "(define the-pi 3.14)\n\n(define (fact n)\n  (if (= 0 n) \n      1\n      (* n (fact (- n 1)))))\n\n(define tau 6.28)\n\n(define (lifted n m)\n  (if (or (< n 0) (< m 0))\n      \"bad\"\n      (+ n m)))\n\n(define (sum-both-nat n m)\n  (liffted n m))\n"
// fs.readFileSync('./corpus/test-files/15-prog-desugared-1.txt', { encoding: 'utf8', flag: 'r' })
export const prog_15_desugared_1_parsed: Program = parser.parse(prog_15_desugared_1)

export const prog_16_desugared_1_ast
  = "{\n   \"kind\": \"Program\",\n   \"body\": [\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"the-pi\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"3.14\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 0,\n               \"line\": 1,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 20,\n               \"line\": 1,\n               \"column\": 21\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"fact\",\n         \"params\": [\n            \"n\"\n         ],\n         \"body\": {\n            \"kind\": \"if\",\n            \"test\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"=\",\n               \"args\": [\n                  {\n                     \"kind\": \"NumericLiteral\",\n                     \"value\": \"0\"\n                  },\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  }\n               ]\n            },\n            \"then\": {\n               \"kind\": \"NumericLiteral\",\n               \"value\": \"1\"\n            },\n            \"else\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"*\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"fact\",\n                     \"args\": [\n                        {\n                           \"kind\": \"CallExpression\",\n                           \"callee\": \"-\",\n                           \"args\": [\n                              {\n                                 \"kind\": \"Identifier\",\n                                 \"name\": \"n\"\n                              },\n                              {\n                                 \"kind\": \"NumericLiteral\",\n                                 \"value\": \"1\"\n                              }\n                           ]\n                        }\n                     ]\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 22,\n               \"line\": 3,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 90,\n               \"line\": 6,\n               \"column\": 29\n            }\n         }\n      },\n      {\n         \"kind\": \"VariableDefinition\",\n         \"name\": \"tau\",\n         \"expr\": {\n            \"kind\": \"NumericLiteral\",\n            \"value\": \"6.28\"\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 92,\n               \"line\": 8,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 109,\n               \"line\": 8,\n               \"column\": 18\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"lifted\",\n         \"params\": [\n            \"n\",\n            \"m\"\n         ],\n         \"body\": {\n            \"kind\": \"if\",\n            \"test\": {\n               \"kind\": \"or\",\n               \"args\": [\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"n\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  },\n                  {\n                     \"kind\": \"CallExpression\",\n                     \"callee\": \"<\",\n                     \"args\": [\n                        {\n                           \"kind\": \"Identifier\",\n                           \"name\": \"m\"\n                        },\n                        {\n                           \"kind\": \"NumericLiteral\",\n                           \"value\": \"0\"\n                        }\n                     ]\n                  }\n               ]\n            },\n            \"then\": {\n               \"kind\": \"StringLiteral\",\n               \"value\": \"bad\"\n            },\n            \"else\": {\n               \"kind\": \"CallExpression\",\n               \"callee\": \"+\",\n               \"args\": [\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"n\"\n                  },\n                  {\n                     \"kind\": \"Identifier\",\n                     \"name\": \"m\"\n                  }\n               ]\n            }\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 111,\n               \"line\": 10,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 186,\n               \"line\": 13,\n               \"column\": 16\n            }\n         }\n      },\n      {\n         \"kind\": \"FunctionDefinition\",\n         \"name\": \"sum-both-nat\",\n         \"params\": [\n            \"n\",\n            \"m\"\n         ],\n         \"body\": {\n            \"kind\": \"CallExpression\",\n            \"callee\": \"liffted\",\n            \"args\": [\n               {\n                  \"kind\": \"Identifier\",\n                  \"name\": \"n\"\n               },\n               {\n                  \"kind\": \"Identifier\",\n                  \"name\": \"m\"\n               }\n            ]\n         },\n         \"location\": {\n            \"start\": {\n               \"offset\": 188,\n               \"line\": 15,\n               \"column\": 1\n            },\n            \"end\": {\n               \"offset\": 231,\n               \"line\": 16,\n               \"column\": 17\n            }\n         }\n      }\n   ]\n}"
// fs.readFileSync('./corpus/test-files/16-prog-desugared-1-ast.txt', { encoding: 'utf8', flag: 'r' })
export const prog_16_desugared_1_ast_json: Program = JSON.parse(prog_16_desugared_1_ast)

export const moved_lhs
  = "(define tau 6.28)\n\n(define (sum-both-nat n m)\n  (if (or (< n 0) (< m 0))\n      \"bad\"\n      (+ n m)))\n"
// fs.readFileSync('./corpus/test-files/move-test-lhs.txt', { encoding: 'utf8', flag: 'r' })

export const moved_rhs
  = "(define (sum-both-nat n m)\n  (if (or (< n 0) (< m 0))\n      \"bad\"\n      (+ n m)))\n\n(define tau 6.28)\n"
// fs.readFileSync('./corpus/test-files/move-test-rhs.txt', { encoding: 'utf8', flag: 'r' })


